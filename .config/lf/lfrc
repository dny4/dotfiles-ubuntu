# single column on small panes
#$[ $lf_width -le 80 ] && lf -remote "send $id :set nopreview; set ratios 1" || exit 0

set shell zsh
set icons
set incsearch
set incfilter
set hidden false

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

set errorfmt "\033[7;31m"
set cursorpreviewfmt "\033[7m"
set promptfmt "\033[32;1m%d\033[0m\033[32;1m%f\033[0m"

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

map R :reload; recol; cfg_reload

map sr set reverse!

map gh cd ~
map gd cd ~/Downloads
map gb cd ~/Documents/Ebooks
map gp cd ~/Projects
map gs cd ~/Courses/SWE/
map gC cd ~/.config

map xz zip
map xt tar
map xx extract

map o $open $fx
map O $open -R $fx
map Q $lf -remote "send quit" # close all window
map i $$lf_previewer "$f"
map I %file "$f"

map y
map yy copy
map yp $printf "%s" "$fx" | wl-copy # full path
map yn $printf "%s" "${fx##*/}" | wl-copy # filename
map yd $printf "%s" "${fx%/*}" | wl-copy  # dirname

map d
map dd cut
map dP deletePermanently
# map dF delete
# map DD trash
map dt trash

map p
map pp paste

map F fzf_jump
map f
map fa fzf_search_all
map fg push :fzf_grep<space>
map f<space> filter
map ff filter
map fc setfilter
map fz fzf_jump
map <c-p> fzf_jump

map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open

map a push :create<space>
map E push $$EDITOR<space>
map <backspace2> updir # somehow backspace2 is actual backspace on HHKB, <c-h> is <backspace>

map l lfopen
map <enter> open
map Z zi
map z<space> push :z<space>
map <c-c> :redraw; reload
map <tab> :toggle; down
map <space> quicklook
map <delete>  delete
map <c-c> clear
map . set hidden!
map zp set preview!
map zd set dirfirst!

map ?
map ?? maps
map ?s $echo $fx | less
map ?b $cat ~/.local/share/lf/files | less

map +x chmod +x
map +w chmod +w
map +r chmod +r
map -x chmod -x
map -w chmod -w
map -r chmod -r

map z1 :set nopreview; set ratios 1
map z2 :set nopreview; set ratios 1:2
map z3 :set ratios 1:2:3; set preview

map sw set_wallpaper

map L create-symlink

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map C edit-config

cmd cfg_reload source ~/.config/lf/lfrc
cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

map gL follow_link
map S $$SHELL

cmd chmod ${{
        [ $# -ne 1 ] && exit
        eval "chmod u$1 '$f'"
        lf -remote "send $id reload"
}}

cmd lfopen ${{
    if [ -d "$f" ]; then
        lf -remote "send $id cd '$f'"
    elif [ -f "$f" ]; then
        "$lf_previewer" "$f"
    fi
}}

cmd trash $trash-put -rf $fx # trash-cli installed via apt install trash-cli

cmd delete ${{
    set -f
    printf "$fx\n\n"
    printf "Delete? [y/N]"
    $ans=$(echo ans)
    [ "$ans" = "y" ] && rm -rf $fx
}}

cmd deletePermanently ${{
        rm -rf $fx
}}

cmd on-quit ${{
    printf "${f%/*}" > $HOME/.lfdir
}}

cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id :set nopreview; set ratios 1" || exit 0
    else
        lf -remote "send $id set ratios 1:2:3; set preview" || exit 0
    fi
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    dir=${f%/*}
    dir=${dir##*/}
    set -f
    tar czf "${dir}.tar.gz" $fx
}}

# compress current file or selected files with zip
cmd zip ${{
    dir=${f%/*}
    dir=${dir##*/}
    set -f
    zip -r "${dir}.zip" $fx
}}

cmd z %{{
    d="${@/#\~/$HOME}" # tilde doesn't expand in quotes or vars
    if [ -d $d ]; then
        lf -remote "send $id cd '$d'"
        zoxide add "$d"
    else
        result="$(zoxide query --exclude $PWD $@)"
        lf -remote "send $id cd \"$result\""
    fi
}}

cmd zi ${{
    FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --min-height=100"
    result="$(zoxide query -i)"
    lf -remote "send $id cd \"$result\""
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd touch %{{
    IFS=" "
    if [ -z "$*" ]; then echo "name required"; exit; fi
    if [ -f "$*" ]; then echo "file exists"; exit; fi
    if [ -d "$*" ]; then echo "there is a directory with the same name"; exit; fi
    touch "$*"
    lf -remote "send $id select \"$*\""
}}

cmd create %{{
    IFS=" "
    if [ -z "$*" ]; then echo "name required"; exit; fi
    if [[ "$*" == */ ]] ; then
        mkdir -p -- "$*"
        lf -remote "send $id select \"$*\""
        exit 0
    fi
    base=$(dirname -- "$*")
    [ "$base" != . ] && mkdir -p -- "$base"
    touch "$*"
    lf -remote "send $id select \"$*\""
}}

cmd fzf_jump ${{
    res="$(fd . -H -I -d 6 -E .git -E node_modules | fzf +m | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search_all ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --ansi --bind "change:reload:$RG_PREFIX {q} || true" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd fzf_grep ${{
    res="$( \
        rg --column --line-number --no-heading --color=always --smart-case -e "$*"| \
        fzf --ansi | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd set_wallpaper ${{
  gsettings set org.gnome.desktop.background picture-uri-dark file://$(printf "%s" "$fx")
}}

cmd bulk-rename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))
			
			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

cmd create-symlink ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	echo "$fs" > $index

	max=$(($(cat $index | wc -l)+1))

	counter=1
	while [ $counter -le $max ]; do
		a="$(cat $index | sed "${counter}q;d")"
		counter=$(($counter+1))
		
		ln -s "$a" "$PWD"
	done

}}
